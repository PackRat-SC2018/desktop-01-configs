
##########	Meteo FVWM Script
##########	Weather forecast
##########	by sebaro
##########
##########	rev.2012-09-23

WindowTitle {Meteo}
WindowSize 320 160
WindowPosition 954 10

##### Global Style
Colorset 10
Font "xft:DejaVu Sans:size=8:bold"

Init
Begin
  ##### Widgets Style
  Set $defaultColorset = {10}
  Set $warnColorset = {12}
  Set $nowTempFont = {xft:DejaVu Sans:size=14:bold}

  ##### Settings
  Set $homeDir = (GetOutput {echo $HOME} 1 -1) {/.fvwm/scripts/Meteo/}
  Set $setMyCity = {Timisoara}
  Set $setTempScale = {celsius}
  Set $setStandard = {metric}
  Set $putTmp = {/dev/shm/}
  Set $updateTime = {3600}
  Set $setTheme = {oxygen}
  Set $wgKey = {a1bdaae772795454}

  ##### Widgets
  ChangeFont 3 $nowTempFont
  Set $noIcon = $homeDir {icons/themes/noicon.png}
  If $setTheme <> {} Then
    Set $themeDir = $homeDir {icons/themes/} $setTheme {/}
  Else
    Set $themeDir = $homeDir {icons/themes/default/}
  Set $quitButton = $homeDir {icons/quit.png}
  ChangeIcon 20 $quitButton
  For $i = 2 To 19 Do
    HideWidget $i
  Key Return A 19 1
  Key Escape A 19 2

  ##### Fetch Data
  Set $fetchConditionsFile = $putTmp {meteo_conditions_fetch_file}
  Set $fetchForecastFile = $putTmp {meteo_forecast_fetch_file}
  Set $fetchFileStatus = $putTmp {meteo_fetch_file_status}
  Do {exec echo "" > "} $fetchFileStatus {"}
  Set $wgWeather = {http://api.wunderground.com/api/}

  ##### Temperature Data
  Set $degree = {Â°}
  Set $degreeF = $degree {F}
  Set $degreeC = $degree {C}

  ##### Variables
  Set $myCity = $setMyCity
  Set $tempScale = $setTempScale
  Set $standard = $setStandard
  Set $conditionsParser = {sed -e "s/^\s*//g" | grep "<weather>\|<temp_f>\|<temp_c>\|<relative_humidity>\|<wind_dir>\|<wind_mph>\|<wind_kph>\|<icon>" | sed -e "s/.*>\(.*\)<.*/\1/g"}
  Set $forecastParser = {sed -e "s/^\s*//g" | sed -n '/simpleforecast/,$p' | grep "<weekday_short>\|<fahrenheit>\|<celsius>\|<icon>" | sed -e "s/.*>\(.*\)<.*/\1/g"}
  Set $doFetch = {true}

  ##### Curly Brackets
  Set $leftCB = (GetOutput {printf "\173"} 1 -1)
  Set $rightCB = (GetOutput {printf "\175"} 1 -1)
End

PeriodicTasks
Begin
  ##### Get Data
  If $doFetch == {true} Then
  Begin
    Set $newTitle = {Fetching weather for } $myCity { ...}
    ChangeTitle 1 $newTitle
    Set $conditionsURL = $wgWeather $wgKey {/conditions/q/} $myCity {.xml}
    Set $forecastURL = $wgWeather $wgKey {/forecast/q/} $myCity {.xml}
    Do {exec wget "} $conditionsURL {" -O "} $fetchConditionsFile {" && wget "} $forecastURL {" -O "} $fetchForecastFile {" && echo "1" > "} $fetchFileStatus {" || echo "0" > "} $fetchFileStatus {"}
    Set $fetchReady = {false}
    Set $doFetch = {false}
  End

  ##### Fetching
  If $fetchReady == {false} Then
  Begin
    Set $getFetch = {cat "} $fetchFileStatus {"}
    If (GetOutput $getFetch 1 -1) == 1 Then
    Begin
      Do {exec echo "" > "} $fetchFileStatus {"}
      Set $queryNotFound = {cat "} $fetchConditionsFile {" | grep "querynotfound"}
      Set $queryMultiCity = {cat "} $fetchConditionsFile {" | grep "result" | wc -l}
      If (GetOutput $queryNotFound 1 -1) == {} Then
      Begin
        If (GetOutput $queryMultiCity 1 -1) == 0 Then
        Begin
          ChangeColorset 1 $defaultColorset
          Set $fetchReady = {true}
          Set $doRefresh = {true}
        End
        Else
        Begin
          For $i = 2 To 19 Do
            HideWidget $i
          Set $fetchReady = {true}
          ChangeColorset 1 $warnColorset
          Set $newTitle = {Add country or state of } $myCity {!}
          ChangeTitle 1 $newTitle
        End
      End
      Else
      Begin
        For $i = 2 To 19 Do
          HideWidget $i
        Set $fetchReady = {true}
        ChangeColorset 1 $warnColorset
        Set $newTitle = {Weather not available for } $myCity {!}
        ChangeTitle 1 $newTitle
      End
    End
    If (GetOutput $getFetch 1 -1) == 0 Then
    Begin
      Do {exec echo "" > "} $fetchFileStatus {"}
      For $i = 2 To 19 Do
        HideWidget $i
      Set $fetchReady = {true}
      ChangeColorset 1 $warnColorset
      Set $newTitle = {Fetching weather for } $myCity { failed!}
      ChangeTitle 1 $newTitle
    End
  End

  ##### Print Data
  If $doRefresh == {true} Then
  Begin
    ## Set City
    ChangeColorset 1 $defaultColorset
    Set $newTitle =  {Weather for } $myCity
    ChangeTitle 1 $newTitle

    ## Conditions Now
    Set $wConditions = {cat } $fetchConditionsFile { | } $conditionsParser

    # Icon
    Set $wIcon = (GetOutput $wConditions 8 -1)
    If $wIcon <> {} Then
      Set $wIcon = $themeDir $wIcon {.png}
    Else
      Set $wIcon = $noIcon
    ChangeIcon 2 $wIcon

    # Temperature
    Set $wTempF = (GetOutput $wConditions 2 -1)
    Set $wTempC = (GetOutput $wConditions 3 -1)
    If $wTempF <> {} Then
      Set $wTempF = $wTempF $degreeF
    Else
      Set $wTempF = {N/A}
    If $wTempC <> {} Then
      Set $wTempC = $wTempC $degreeC
    Else
      Set $wTempC = {N/A}
    If $tempScale == {fahrenheit} Then
      ChangeTitle 3 $wTempF
    Else
      ChangeTitle 3 $wTempC

    # Condition
    Set $wCondition = (GetOutput $wConditions 1 -1)
    If $wCondition <> {} Then
      ChangeTitle 4 $wCondition
    Else
      ChangeTitle 4 {Condition: N/A}

    # Wind
    Set $wWindDir = (GetOutput $wConditions 5 -1)
    Set $wWindMPH = (GetOutput $wConditions 6 -1)
    If $wWindMPH <> {} Then
      Set $wWindMPH = $wWindMPH { mph}
    Else
      Set $wWindMPH = {N/A}
    Set $wWindKMH = (GetOutput $wConditions 7 -1)
    If $wWindKMH <> {} Then
      Set $wWindKMH = $wWindKMH { km/h}
    Else
      Set $wWindKMH = {N/A}
    If $wWindDir <> {} Then
    Begin
      If $standard == {metric} Then
      Begin
        If $wWindKMH <> {N/A} Then
          Set $wWind = {Wind: } $wWindDir { at } $wWindKMH
        Else
          Set $wWind = {Wind: N/A}
      End
      Else
      Begin
        If $wWindMPH <> {N/A} Then
          Set $wWind = {Wind: } $wWindDir { at } $wWindMPH
        Else
          Set $wWind = {Wind: N/A}
      End
    End
    Else
      Set $wWind = {Wind: N/A}
    ChangeTitle 5 $wWind

    # Humidity
    Set $wHumidity = (GetOutput $wConditions 4 -1)
    If $wHumidity <> {} Then
      Set $wHumidity = {Humidity: } $wHumidity
    Else
      Set $wHumidity = {Humidity: N/A}
    ChangeTitle 6 $wHumidity

    ## Forecast
    Set $wForecast = {cat } $fetchForecastFile { | } $forecastParser
    Set $widgetStep = 3
    Set $weatherStep = 6

    # Days
    Set $weatherDay = 1
    Set $widgetDay = 7
    For $d = 1 To 4 Do
    Begin
      Set $wDay = (GetOutput $wForecast $weatherDay -1)
      If $wDay <> {} Then
        ChangeTitle $widgetDay $wDay
      Else
        ChangeTitle $widgetDay {N/A}
      Set $weatherDay = (Add $weatherDay $weatherStep)
      Set $widgetDay = (Add $widgetDay $widgetStep)
    End

    # Icons
    Set $weatherIcon = 6
    Set $widgetIcon = 8
    For $d = 1 To 4 Do
    Begin
      Set $wIconF = (GetOutput $wForecast $weatherIcon -1)
      If $wIconF <> {} Then
      Begin
        Set $wIconImg = $themeDir $wIconF {.png}
        ChangeIcon $widgetIcon $wIconImg
      End
      Else
        ChangeIcon $widgetIcon $noIcon
      Set $weatherIcon = (Add $weatherIcon $weatherStep)
      Set $widgetIcon = (Add $widgetIcon $widgetStep)
    End

    # Temperatures
    Set $weatherFHigh = 2
    Set $weatherCHigh = 3
    Set $weatherFLow = 4
    Set $weatherCLow = 5
    Set $widgetTemp = 9
    For $d = 1 To 4 Do
    Begin
      Set $wTempFHigh = (GetOutput $wForecast $weatherFHigh -1)
      If $wTempFHigh <> {} Then
        Set $wTempFHigh = $wTempFHigh $degree
      Else
        Set $wTempFHigh = {N/A}
      Set $weatherFHigh = (Add $weatherFHigh $weatherStep)
      Set $wTempFLow = (GetOutput $wForecast $weatherFLow -1)
      If $wTempFLow <> {} Then
        Set $wTempFLow = $wTempFLow $degree
      Else
        Set $wTempFLow = {N/A}
      Set $weatherFLow = (Add $weatherFLow $weatherStep)
      Set $weatherFAll = $wTempFHigh { : } $wTempFLow
      Set $wTempCHigh = (GetOutput $wForecast $weatherCHigh -1)
      If $wTempCHigh <> {} Then
        Set $wTempCHigh = $wTempCHigh $degree
      Else
        Set $wTempCHigh = {N/A}
      Set $weatherCHigh = (Add $weatherCHigh $weatherStep)
      Set $wTempCLow = (GetOutput $wForecast $weatherCLow -1)
      If $wTempCLow <> {} Then
        Set $wTempCLow = $wTempCLow $degree
      Else
        Set $wTempCLow = {N/A}
      Set $weatherCLow = (Add $weatherCLow $weatherStep)
      Set $weatherCAll = $wTempCHigh { : } $wTempCLow
      If $tempScale == {fahrenheit} Then
        ChangeTitle $widgetTemp $weatherFAll
      Else
        ChangeTitle $widgetTemp $weatherCAll
      Set $widgetTemp = (Add $widgetTemp $widgetStep)
    End

    # Show The Widgets
    For $i = 2 To 18 Do
      ShowWidget $i

    Set $doRefresh = {false}
  End

  ##### Change City
  If $changeCity == {true} Then
  Begin
    If $cityAction == {new} Then
    Begin
      ChangeColorset 1 $defaultColorset
      Set $newTitle = {Weather for }
      ChangeTitle 1 $newTitle
      ShowWidget 19
      ChangeTitle 19 $myCity
    End
    If $cityAction == {apply} Then
    Begin
      Set $getNewCity = {echo "} (GetTitle 19) {" | sed -e "s/^[ ]*//" -e "s/[ ]*$//" -e "s/\\\//g"}
      Set $newCity = (GetOutput $getNewCity 1 -1)
      If $newCity == {} Then
        Set $invalidCity = {true}
      Else
      Begin
        Set $findBadChars = {echo "} $newCity {" | grep "[^a-zA-Z ',-]"}
        Set $findAlphaChars = {echo "} $newCity {" | grep "[a-zA-Z]"}
        If (GetOutput $findBadChars 1 -1) == {} Then
        Begin
          If (GetOutput $findAlphaChars 1 -1) <> {} Then
            Set $invalidCity = {false}
          Else
            Set $invalidCity = {true}
        End
        Else
          Set $invalidCity = {true}
      End
      If $invalidCity == {true} Then
      Begin
        ChangeColorset 1 $warnColorset
        Set $newTitle = {Invalid City}
        ChangeTitle 1 $newTitle
      End
      Else
      Begin
        Set $myCity = $newCity
        Do {exec sed -i -e "s/^.*Set \$setMyCity.*$/  Set \$setMyCity = } $leftCB $myCity $rightCB {/" } $homeDir {Meteo}
        Set $doFetch = {true}
      End
      HideWidget 19
    End
    If $cityAction == {cancel} Then
    Begin
      Set $newTitle = {Weather for } $myCity
      ChangeTitle 1 $newTitle
      HideWidget 19
    End
    Set $changeCity = {false}
  End

  ##### Change Temperature Scale
  If $changeTempScale == {true} Then
  Begin
    If $tempScale == {celsius} Then
      Set $tempScale = {fahrenheit}
    Else
      Set $tempScale = {celsius}
    Do {exec sed -i -e "s/^.*Set \$setTempScale.*$/  Set \$setTempScale = } $leftCB $tempScale $rightCB {/" } $homeDir {Meteo}
    Set $doRefresh = {true}
    Set $changeTempScale = {false}
  End

  ##### Change Standard
  If $changeStandard == {true} Then
  Begin
    If $standard == {metric} Then
      Set $standard = {english}
    Else
      Set $standard = {metric}
    Do {exec sed -i -e "s/^.*Set \$setStandard.*$/  Set \$setStandard = } $leftCB $standard $rightCB {/" } $homeDir {Meteo}
    Set $doRefresh = {true}
    Set $changeStandard = {false}
  End

  ##### Update Weather
  If (RemainderOfDiv (GetTime) $updateTime) == 0 Then
    Set $doFetch = {true}
End

Widget		1
Property
  Type		ItemDraw
  Size		250 20
  Position		10 5
  Flags		NoFocus NoReliefString Left
Main
  Case message of
    SingleClic :
    Begin
      Set $cityAction = {new}
      Set $changeCity = {true}
    End
  End

Widget		2
Property
  Type		ItemDraw
  Size		40 40
  Position		10 30
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		3
Property
  Type		ItemDraw
  Size		100 30
  Position		55 25
  Flags		NoFocus NoReliefString Left
Main
  Case message of
    SingleClic :
    Begin
      Set $changeTempScale = {true}
    End
  End

Widget		4
Property
  Type		ItemDraw
  Size		100 20
  Position		55 50
  Flags		NoFocus NoReliefString Left
Main
  Case message of
  End

Widget		5
Property
  Type		ItemDraw
  Size		160 20
  Position		160 30
  Flags		NoFocus NoReliefString Left
Main
  Case message of
    SingleClic :
    Begin
      Set $changeStandard = {true}
    End
  End

Widget		6
Property
  Type		ItemDraw
  Size		160 20
  Position		160 50
  Flags		NoFocus NoReliefString Left
Main
  Case message of
  End

Widget		7
Property
  Type		ItemDraw
  Size		40 20
  Position		32 75
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		8
Property
  Type		ItemDraw
  Size		40 40
  Position		32 95
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		9
Property
  Type		ItemDraw
  Size		64 20
  Position		20 135
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		10
Property
  Type		ItemDraw
  Size		40 20
  Position		104 75
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		11
Property
  Type		ItemDraw
  Size		40 40
  Position		104 95
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		12
Property
  Type		ItemDraw
  Size		64 20
  Position		92 135
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		13
Property
  Type		ItemDraw
  Size		40 20
  Position		176 75
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		14
Property
  Type		ItemDraw
  Size		40 40
  Position		176 95
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		15
Property
  Type		ItemDraw
  Size		64 20
  Position		164 135
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		16
Property
  Type		ItemDraw
  Size		40 20
  Position		248 75
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		17
Property
  Type		ItemDraw
  Size		40 40
  Position		248 95
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		18
Property
  Type		ItemDraw
  Size		64 20
  Position		236 135
  Flags		NoFocus NoReliefString
Main
  Case message of
  End

Widget		19
Property
  Type		TextField
  Size		200 20
  Position		90 5
  Flags		NoReliefString Left
Main
  Case message of
    1 :
    Begin
      Set $cityAction = {apply}
      Set $changeCity = {true}
    End
    2 :
    Begin
      Set $cityAction = {cancel}
      Set $changeCity = {true}
    End
  End

Widget		20
Property
  Type		ItemDraw
  Size		16 16
  Position		303 1
  Flags		NoFocus NoReliefString
Main
  Case message of
    SingleClic :
    Begin
      Quit
    End
  End
